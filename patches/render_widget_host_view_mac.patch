diff --git a/content/browser/renderer_host/render_widget_host_view_mac.mm b/content/browser/renderer_host/render_widget_host_view_mac.mm
index b060993..3f627d0 100644
--- a/content/browser/renderer_host/render_widget_host_view_mac.mm
+++ b/content/browser/renderer_host/render_widget_host_view_mac.mm
@@ -80,6 +80,7 @@
 #include "ui/gfx/geometry/size_conversions.h"
 #include "ui/gfx/scoped_ns_graphics_context_save_gstate_mac.h"
 #include "ui/gfx/screen.h"
+#include "ui/gl/gpu_switching_manager.h"
 #include "ui/gl/gl_switches.h"
 
 using content::BrowserAccessibility;
@@ -129,6 +130,11 @@ RenderWidgetHostViewMac* GetRenderWidgetHostViewToUse(
 
 }  // namespace
 
+@interface NSWindow (AtomCustomMethods)
+- (BOOL)acceptsFirstMouse;
+- (BOOL)disableAutoHideCursor;
+@end
+
 // These are not documented, so use only after checking -respondsToSelector:.
 @interface NSApplication (UndocumentedSpeechMethods)
 - (void)speakString:(NSString*)string;
@@ -569,9 +575,11 @@ RenderWidgetHostViewMac::RenderWidgetHostViewMac(RenderWidgetHost* widget,
   // Paint this view host with |background_color_| when there is no content
   // ready to draw.
   background_layer_.reset([[CALayer alloc] init]);
+  if ([cocoa_view() isOpaque]) {
   // Set the default color to be white. This is the wrong thing to do, but many
   // UI components expect this view to be opaque.
   [background_layer_ setBackgroundColor:CGColorGetConstantColor(kCGColorWhite)];
+  }
   [cocoa_view_ setLayer:background_layer_];
   [cocoa_view_ setWantsLayer:YES];
 
@@ -650,6 +658,8 @@ void RenderWidgetHostViewMac::EnsureBrowserCompositorView() {
     browser_compositor_->Unsuspend();
     browser_compositor_state_ = BrowserCompositorActive;
   }
+  if (![cocoa_view() isOpaque])
+    root_layer_->GetCompositor()->SetHostHasTransparentBackground(true);
 }
 
 void RenderWidgetHostViewMac::SuspendBrowserCompositorView() {
@@ -1836,6 +1846,9 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 }
 
 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
+  if ([self.window respondsToSelector:@selector(acceptsFirstMouse)] &&
+      [self.window acceptsFirstMouse])
+    return YES;
   return [self acceptsMouseEventsWhenInactive];
 }
 
@@ -1963,6 +1976,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
   if (EventIsReservedBySystem(theEvent))
     return NO;
 
+#if 0
   // If we return |NO| from this function, cocoa will send the key event to
   // the menu and only if the menu does not process the event to |keyDown:|. We
   // want to send the event to a renderer _before_ sending it to the menu, so
@@ -1976,6 +1990,7 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
     DCHECK(![[NSApp mainMenu] performKeyEquivalent:theEvent]);
     return NO;
   }
+#endif
 
   // Command key combinations are sent via performKeyEquivalent rather than
   // keyDown:. We just forward this on and if WebCore doesn't want to handle
@@ -2642,6 +2657,9 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 // move) for the given event. Customize here to be more selective about which
 // key presses to autohide on.
 + (BOOL)shouldAutohideCursorForEvent:(NSEvent*)event {
+  if ([event.window respondsToSelector:@selector(disableAutoHideCursor)] &&
+      [event.window disableAutoHideCursor])
+    return NO;
   return ([event type] == NSKeyDown &&
              !([event modifierFlags] & NSCommandKeyMask)) ? YES : NO;
 }
@@ -2797,9 +2815,11 @@ void RenderWidgetHostViewMac::OnDisplayMetricsChanged(
 // Since this implementation doesn't have to wait any IPC calls, this doesn't
 // make any key-typing jank. --hbono 7/23/09
 //
+#ifndef MAS_BUILD
 extern "C" {
 extern NSString *NSTextInputReplacementRangeAttributeName;
 }
+#endif
 
 - (NSArray *)validAttributesForMarkedText {
   // This code is just copied from WebKit except renaming variables.
@@ -2808,7 +2828,9 @@ extern NSString *NSTextInputReplacementRangeAttributeName;
         NSUnderlineStyleAttributeName,
         NSUnderlineColorAttributeName,
         NSMarkedClauseSegmentAttributeName,
+#ifndef MAS_BUILD
         NSTextInputReplacementRangeAttributeName,
+#endif
         nil]);
   }
   return validAttributesForMarkedText_.get();
@@ -3299,7 +3321,12 @@ extern NSString *NSTextInputReplacementRangeAttributeName;
 }
 
 - (BOOL)isOpaque {
-  return opaque_;
+  bool wantsTransparent = ui::GpuSwitchingManager::UseTransparent() ||
+                          (self.window && ![self.window isOpaque]);
+  if (wantsTransparent)
+    return NO;
+  else
+    return opaque_;
 }
 
 // "-webkit-app-region: drag | no-drag" is implemented on Mac by excluding
